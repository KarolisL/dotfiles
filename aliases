# vim: ft=zsh

## Management
alias rel_aliases="source ~/.aliases"
alias rel_conf="source ~/.zshrc"
alias _vimzsh="vim ~/.zshrc"
alias _vimalias="vim ~/.aliases"

alias _getauth="source ~/.auths"



alias ls="ls --color=auto"

##### Git
alias gcs='git commit --verbose -S'
#### GitHub
function gh-clone() {
    local user="$1"
    shift
    local repo="$1" 
    shift

    git clone git@github.com:"$user"/"$repo" $@
}

##### Kubernetes
alias kube-load-compl="source <(kubectl completion zsh)"
alias kget="kubectl get"
alias kc="kubectl"
alias kcc="kubectl create"
alias kca="kubectl apply"
alias kcaf="kubectl apply --filename"
alias kcd="kubectl describe"
alias kcrm="kubectl delete"
alias ksget="kubectl get --namespace=kube-system"
alias ksc="kubectl --namespace=kube-system"


alias kcpf="kubectl port-forward"
alias kcl="kubectl logs"
alias kce="kubectl exec"
alias kclf="kubectl logs -f"

alias ksctx='kubectl config set current-context'
alias kctx='kubectx'

alias k-get-img="kubectl get pods -o template --template '{{index .spec \"containers\" 0 \"image\"}}'"

#####

alias mvn="mvn-color"

# Raspberry
alias ssh2pi="ssh 192.168.0.2 -L 9001:localhost:9001"

# SSH
alias ssh-nocheck='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'

### SFR
alias aws-roll-keys='aws-roll-keys.py -e all -a -i awskeys@acteurope.onmicrosoft.com,karolis@inventi.lt'
alias ssh-puppet-pf="ssh -R 8140:localhost:8140"
function gneis-ssh() {
    # Usage: gneis-ssh test rabbitmq01a
    local env=$1
    shift
    local host=$1
    shift
    local should_pf=$1
    if [ "$should_pf" = "pf" ]; then
        local pf="-R 8140:localhost:8140"
        shift
    else
        local pf=""
    fi
    ssh "${env}-${host}.${env}.gneis.io" $pf $@
}

# Pass
function pass4idrsa() {
    local env=$1
    local t=${2:-internal}
    pass "ck/keys/${env}_id_rsa_${t}/pass" | pbcopy
}

function add-gneis-key() {
    local env="$1"
    local type="${2:-internal}"
    local key_path="$HOME/.ssh/$env-$type"

    local phrase=$(pass "ck/keys/${env}_id_rsa_${type}/pass")
    echo $phrase

    expect <<EOF
        spawn ssh-add "$key_path"
        expect "Enter passphrase for $key_path:"
        send "my_pass"
EOF
}

# AWS
function awsenv() {
    ENV=$1
    eval $(aws-env-update.py -a -x -e $ENV)

    export AWS_ACCESS_KEY="$AWS_ACCESS_KEY_ID"
    export AWS_SECRET_KEY="$AWS_SECRET_ACCESS_KEY"
}



# Terraform
function tf() {
    if [ $# -lt 1 ]; then
        "Usage: $0 <version> [..args]"
        return 1
    fi
    version="$1"
    shift
    /usr/local/Cellar/terraform/${version}/bin/terraform $@
}
alias tf-nr-plan="terraform plan -refresh=false"
alias tf-nr-apply="terraform apply -refresh=false"
alias tf-nrp-plan="terraform plan -out plan.txt -refresh=false"
alias tf-nrp-apply="terraform apply -refresh=false plan.txt "

alias osx-docker-shell="screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty"

alias ec='/Applications/Emacs.app/Contents/MacOS/bin/emacsclient'
